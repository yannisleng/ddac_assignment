@model ShipmentResultModel

@if (Model != null && Model.Shipment != null)
{
    <div class="flex min-h-screen items-center justify-center">
        <div class="mx-auto mb-96 mt-10 max-w-4xl rounded-lg bg-white p-6 shadow-md">
            <div class="flex items-center justify-between">
                <h2 class="text-[#99213A] text-xl font-bold"># @Model.Shipment.ShipmentId</h2>
                <span class="text-sm text-gray-500">@Model.Shipment.ShipmentDate.ToString("dd MMMM yyyy")</span>
            </div>
            <div class="mt-4">
                <p class="text-black"><strong>#Parcel ID:</strong> @Model.Shipment.ParcelId</p>
                <div class="mt-2 flex flex-col sm:flex-row">
                    <div class="mr-8">
                        <h3 class="text-[#F18092] text-sm font-semibold">Pickup address</h3>
                        <p class="text-[#F18092] text-sm">@Model.Shipment.PickupAddress.Replace("||", ",")</p>
                    </div>
                    <div>
                        <h3 class="text-[#F18092] text-sm font-semibold">Delivery address</h3>
                        <p class="text-[#F18092] text-sm">@Model.Shipment.DeliveryAddress.Replace("||", ",")</p>
                    </div>
                </div>
            </div>
            <div class="mt-6">
                <h3 class="bg-ok-boss-1 text-[#4e5969] mt-6 text-lg font-bold">Shipment progress</h3>
                <div class="mt-2 flex flex-row gap-x-6">
                    <div class="flex basis-1/5 items-center justify-end gap-x-4 pe-2">
                        <div class="inline-flex flex-col gap-y-0.5">
                            @{
                                var shipmentDate = Model.Shipment.ShipmentDate;
                                var orderCreatedDate = shipmentDate.ToString("dd/MM/yyyy");
                                var orderCreatedTime = shipmentDate.ToString("hh:mm tt");
                            }
                            <div class="text-[#1d2129] text-sm">@orderCreatedDate</div>
                            <div class="text-[#4e5969] text-xs">@orderCreatedTime</div>
                        </div>
                        <div class="bg-[#063078] flex items-center justify-between rounded-full p-2.5 text-white">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-clipboard-list"><rect width="8" height="4" x="8" y="2" rx="1" ry="1" /><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" /><path d="M12 11h4" /><path d="M12 16h4" /><path d="M8 11h.01" /><path d="M8 16h.01" /></svg>
                        </div>
                    </div>
                    <div class="bg-[#f2f3f5] flex basis-4/5 flex-col gap-y-1 rounded-md px-3 py-2">
                        <div class="text-[#1d2129] text-sm">Order has been created</div>
                    </div>
                </div>
                <div class="mt-4">
                    @foreach (var transition in Model.Transitions)
                    {
                        string statusMessage;
                        string iconClass;
                        string bgColor;

                        if (transition.Status.ToLower() == "picked up")
                        {
                            statusMessage = "Your parcel has been picked up";
                            iconClass = "bg-[#F9CC45]";
                            bgColor = "bg-[#f2f3f5]";
                        }
                        else if (transition.Status.ToLower() == "in transit")
                        {
                            statusMessage = "Your parcel is in transit";
                            iconClass = "bg-[#FF9A2E]";
                            bgColor = "bg-[#f2f3f5]";
                        }
                        else if (transition.Status.ToLower() == "delivered")
                        {
                            statusMessage = "Your parcel has been delivered";
                            iconClass = "bg-[#4cd263]";
                            bgColor = "bg-[#f2f3f5]";
                        }
                        else
                        {
                            statusMessage = "Status not available.";
                            iconClass = "bg-gray-400";
                            bgColor = "bg-gray-100";
                        }

                        <div class="mb-4 flex items-center">
                            <div class="mr-4 text-center">
                                <span class="block text-sm font-bold">@transition.Timestamp.ToString("dd MMMM")</span>
                                <span class="block text-xs">@transition.Timestamp.ToString("HH:mm tt")</span>
                            </div>
                            <div class="flex-1 @bgColor rounded-lg px-4 py-2">
                                <div class="flex items-center">
                                    <div class="@iconClass rounded-full p-2.5 text-white">
                                        @if (transition.Status.ToLower() == "delivered")
                                        {
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-check"><path d="M20 6 9 17l-5-5" /></svg>
                                        }
                                        else if (transition.Status.ToLower() == "in transit")
                                        {
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-truck"><path d="M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2" /><path d="M15 18H9" /><path d="M19 18h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14" /><circle cx="17" cy="18" r="2" /><circle cx="7" cy="18" r="2" /></svg>
                                        }
                                        else if (transition.Status.ToLower() == "picked up")
                                        {
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-package-check"><path d="m16 16 2 2 4-4" /><path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14" /><path d="m7.5 4.27 9 5.15" /><polyline points="3.29 7 12 12 20.71 7" /><line x1="12" x2="12" y1="22" y2="12" /></svg>
                                        }
                                    </div>
                                    <p class="ml-4 text-sm font-semibold">@statusMessage</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center text-xl font-bold text-red-500">
        Invalid shipment ID
    </div>
}
